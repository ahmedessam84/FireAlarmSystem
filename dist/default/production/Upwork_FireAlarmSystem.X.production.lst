

Microchip Technology PIC LITE Macro Assembler V1.41 build -162212810 
                                                                                               Fri Oct 06 20:08:26 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	16F676
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     6                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	maintext,global,class=CODE,split=1,delta=2
     8                           	psect	text1,local,class=CODE,merge=1,delta=2
     9                           	psect	intentry,global,class=CODE,delta=2
    10                           	dabs	1,0x5E,2
    11  0000                     
    12                           ; Version 1.41
    13                           ; Generated 25/01/2017 GMT
    14                           ; 
    15                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    16                           ; All rights reserved.
    17                           ; 
    18                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    19                           ; 
    20                           ; Redistribution and use in source and binary forms, with or without modification, are
    21                           ; permitted provided that the following conditions are met:
    22                           ; 
    23                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    24                           ;        conditions and the following disclaimer.
    25                           ; 
    26                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    27                           ;        of conditions and the following disclaimer in the documentation and/or other
    28                           ;        materials provided with the distribution.
    29                           ; 
    30                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    31                           ;        software without specific prior written permission.
    32                           ; 
    33                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    34                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    35                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    36                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    37                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    38                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    39                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    40                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    41                           ; 
    42                           ; 
    43                           ; Code-generator required, PIC16F676 Definitions
    44                           ; 
    45                           ; SFR Addresses
    46  0000                     	;# 
    47  0001                     	;# 
    48  0002                     	;# 
    49  0003                     	;# 
    50  0004                     	;# 
    51  0005                     	;# 
    52  0007                     	;# 
    53  000A                     	;# 
    54  000B                     	;# 
    55  000C                     	;# 
    56  000E                     	;# 
    57  000E                     	;# 
    58  000F                     	;# 
    59  0010                     	;# 
    60  0019                     	;# 
    61  001E                     	;# 
    62  001F                     	;# 
    63  0081                     	;# 
    64  0085                     	;# 
    65  0087                     	;# 
    66  008C                     	;# 
    67  008E                     	;# 
    68  0090                     	;# 
    69  0091                     	;# 
    70  0095                     	;# 
    71  0095                     	;# 
    72  0096                     	;# 
    73  0096                     	;# 
    74  0099                     	;# 
    75  009A                     	;# 
    76  009A                     	;# 
    77  009B                     	;# 
    78  009C                     	;# 
    79  009D                     	;# 
    80  009E                     	;# 
    81  009F                     	;# 
    82  000E                     _TMR1	set	14
    83  000C                     _PIR1bits	set	12
    84  0007                     _PORTCbits	set	7
    85  0005                     _PORTAbits	set	5
    86  000B                     _INTCONbits	set	11
    87  0010                     _T1CONbits	set	16
    88  0007                     _PORTC	set	7
    89  0019                     _CMCONbits	set	25
    90  008C                     _PIE1bits	set	140
    91  0087                     _TRISC	set	135
    92  0081                     _OPTION_REGbits	set	129
    93  0095                     _WPUA	set	149
    94  0085                     _TRISA	set	133
    95  0091                     _ANSEL	set	145
    96                           
    97                           ; #config settings
    98  0000                     
    99                           	psect	cinit
   100  0010                     start_initialization:	
   101  0010                     __initialization:	
   102                           
   103                           ; Clear objects allocated to BANK0
   104  0010  01AD               	clrf	__pbssBANK0& (0+127)
   105  0011  01AE               	clrf	(__pbssBANK0+1)& (0+127)
   106  0012                     end_of_initialization:	
   107                           ;End of C runtime variable initialization code
   108                           
   109  0012                     __end_of__initialization:	
   110  0012  0183               	clrf	3
   111  0013  2814               	ljmp	_main	;jump to C main() function
   112                           
   113                           	psect	bssBANK0
   114  002D                     __pbssBANK0:	
   115  002D                     _ui16TickMs:	
   116  002D                     	ds	2
   117                           
   118                           	psect	cstackBANK0
   119  0020                     __pcstackBANK0:	
   120  0020                     ?_main:	
   121  0020                     ?_ISR:	
   122                           ; 1 bytes @ 0x0
   123                           
   124  0020                     ??_ISR:	
   125                           ; 1 bytes @ 0x0
   126                           
   127                           
   128                           ; 1 bytes @ 0x0
   129  0020                     	ds	4
   130  0024                     ??_main:	
   131                           
   132                           ; 1 bytes @ 0x4
   133  0024                     	ds	4
   134  0028                     main@ui16BlinkTimer:	
   135                           
   136                           ; 2 bytes @ 0x8
   137  0028                     	ds	2
   138  002A                     main@bFirstEntry:	
   139                           
   140                           ; 1 bytes @ 0xA
   141  002A                     	ds	1
   142  002B                     main@ui16SwitchTimer:	
   143                           
   144                           ; 2 bytes @ 0xB
   145  002B                     	ds	2
   146                           
   147                           	psect	maintext
   148  0014                     __pmaintext:	
   149 ;;
   150 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
   151 ;;
   152 ;; *************** function _main *****************
   153 ;; Defined at:
   154 ;;		line 25 in file "main.c"
   155 ;; Parameters:    Size  Location     Type
   156 ;;		None
   157 ;; Auto vars:     Size  Location     Type
   158 ;;  ui16SwitchTi    2   11[BANK0 ] unsigned int 
   159 ;;  ui16BlinkTim    2    8[BANK0 ] unsigned int 
   160 ;;  bFirstEntry     1   10[BANK0 ] unsigned char 
   161 ;; Return value:  Size  Location     Type
   162 ;;                  1    wreg      void 
   163 ;; Registers used:
   164 ;;		wreg, status,2, status,0
   165 ;; Tracked objects:
   166 ;;		On entry : B00/0
   167 ;;		On exit  : 0/0
   168 ;;		Unchanged: 0/0
   169 ;; Data sizes:     COMMON   BANK0
   170 ;;      Params:         0       0
   171 ;;      Locals:         0       5
   172 ;;      Temps:          0       4
   173 ;;      Totals:         0       9
   174 ;;Total ram usage:        9 bytes
   175 ;; Hardware stack levels required when called:    1
   176 ;; This function calls:
   177 ;;		Nothing
   178 ;; This function is called by:
   179 ;;		Startup code after reset
   180 ;; This function uses a non-reentrant model
   181 ;;
   182                           
   183                           
   184                           ;psect for function _main
   185  0014                     _main:	
   186                           
   187                           ;main.c: 27: uint16_t ui16SwitchTimer = 0;
   188                           
   189                           ;incstack = 0
   190                           ; Regs used in _main: [wreg+status,2+status,0]
   191  0014  1283               	bcf	3,5	;RP0=0, select bank0
   192  0015  01AB               	clrf	main@ui16SwitchTimer
   193  0016  01AC               	clrf	main@ui16SwitchTimer+1
   194                           
   195                           ;main.c: 28: uint16_t ui16BlinkTimer = 0;
   196  0017  01A8               	clrf	main@ui16BlinkTimer
   197  0018  01A9               	clrf	main@ui16BlinkTimer+1
   198                           
   199                           ;main.c: 29: bool bFirstEntry = 1;
   200  0019  01AA               	clrf	main@bFirstEntry
   201  001A  0AAA               	incf	main@bFirstEntry,f
   202                           
   203                           ;main.c: 32: CMCONbits.CM = 0x07;
   204  001B  3007               	movlw	7
   205  001C  0499               	iorwf	25,f	;volatile
   206                           
   207                           ;main.c: 33: ANSEL = 0x00;
   208  001D  1683               	bsf	3,5	;RP0=1, select bank1
   209  001E  0191               	clrf	17	;volatile
   210                           
   211                           ;main.c: 34: TRISA= 0xff;
   212  001F  30FF               	movlw	255
   213  0020  0085               	movwf	5	;volatile
   214                           
   215                           ;main.c: 35: WPUA = 0xff;
   216  0021  30FF               	movlw	255
   217  0022  0095               	movwf	21	;volatile
   218                           
   219                           ;main.c: 36: OPTION_REGbits.nRAPU = 0;
   220  0023  1381               	bcf	1,7	;volatile
   221                           
   222                           ;main.c: 39: TRISC= 0x00;
   223  0024  0187               	clrf	7	;volatile
   224                           
   225                           ;main.c: 40: PORTC= 0x00;
   226  0025  1283               	bcf	3,5	;RP0=0, select bank0
   227  0026  0187               	clrf	7	;volatile
   228                           
   229                           ;main.c: 43: T1CONbits.T1CKPS = 0x00;
   230  0027  30CF               	movlw	-49
   231  0028  0590               	andwf	16,f	;volatile
   232                           
   233                           ;main.c: 46: T1CONbits.TMR1CS = 0;
   234  0029  1090               	bcf	16,1	;volatile
   235                           
   236                           ;main.c: 49: TMR1 = 64536;
   237  002A  30FC               	movlw	252
   238  002B  008F               	movwf	15	;volatile
   239  002C  3018               	movlw	24
   240  002D  008E               	movwf	14	;volatile
   241                           
   242                           ;main.c: 52: INTCONbits.PEIE = 1;
   243  002E  170B               	bsf	11,6	;volatile
   244                           
   245                           ;main.c: 53: INTCONbits.GIE = 1;
   246  002F  178B               	bsf	11,7	;volatile
   247                           
   248                           ;main.c: 54: PIE1bits.TMR1IE = 1;
   249  0030  1683               	bsf	3,5	;RP0=1, select bank1
   250  0031  140C               	bsf	12,0	;volatile
   251                           
   252                           ;main.c: 57: T1CONbits.TMR1ON = 0x01;
   253  0032  1283               	bcf	3,5	;RP0=0, select bank0
   254  0033  1410               	bsf	16,0	;volatile
   255  0034                     l615:	
   256                           ;main.c: 59: while(1){
   257                           
   258                           
   259                           ;main.c: 62: if( PORTAbits.RA0 == 0){
   260  0034  1283               	bcf	3,5	;RP0=0, select bank0
   261  0035  1C05               	btfss	5,0	;volatile
   262                           
   263                           ;main.c: 64: PORTCbits.RC4 = 1;
   264  0036  1607               	bsf	7,4	;volatile
   265                           
   266                           ;main.c: 66: }
   267                           ;main.c: 69: if( PORTAbits.RA4 == 0){
   268  0037  1A05               	btfsc	5,4	;volatile
   269  0038  283B               	goto	l35
   270                           
   271                           ;main.c: 71: PORTCbits.RC4 = 1;
   272  0039  1607               	bsf	7,4	;volatile
   273                           
   274                           ;main.c: 72: PORTCbits.RC3 = 1;
   275  003A  1587               	bsf	7,3	;volatile
   276  003B                     l35:	
   277                           
   278                           ;main.c: 74: }
   279                           ;main.c: 77: if( PORTAbits.RA2 == 0){
   280  003B  1905               	btfsc	5,2	;volatile
   281  003C  283F               	goto	l36
   282                           
   283                           ;main.c: 79: PORTCbits.RC4 = 1;
   284  003D  1607               	bsf	7,4	;volatile
   285                           
   286                           ;main.c: 80: PORTCbits.RC2 = 1;
   287  003E  1507               	bsf	7,2	;volatile
   288  003F                     l36:	
   289                           
   290                           ;main.c: 82: }
   291                           ;main.c: 86: if( PORTAbits.RA1 == 0){
   292  003F  1885               	btfsc	5,1	;volatile
   293  0040  2843               	goto	l37
   294                           
   295                           ;main.c: 88: PORTCbits.RC4 = 1;
   296  0041  1607               	bsf	7,4	;volatile
   297                           
   298                           ;main.c: 89: PORTCbits.RC1 = 1;
   299  0042  1487               	bsf	7,1	;volatile
   300  0043                     l37:	
   301                           
   302                           ;main.c: 91: }
   303                           ;main.c: 95: if( PORTAbits.RA5 == 0){
   304  0043  1A85               	btfsc	5,5	;volatile
   305  0044  2894               	goto	l641
   306                           
   307                           ;main.c: 98: if( bFirstEntry ){
   308  0045  082A               	movf	main@bFirstEntry,w
   309  0046  1903               	btfsc	3,2
   310  0047  284D               	goto	l631
   311                           
   312                           ;main.c: 100: ui16SwitchTimer = ui16TickMs;
   313  0048  082E               	movf	_ui16TickMs+1,w	;volatile
   314  0049  00AC               	movwf	main@ui16SwitchTimer+1
   315  004A  082D               	movf	_ui16TickMs,w	;volatile
   316  004B  00AB               	movwf	main@ui16SwitchTimer
   317                           
   318                           ;main.c: 101: bFirstEntry = 0;
   319  004C  01AA               	clrf	main@bFirstEntry
   320  004D                     l631:	
   321                           
   322                           ;main.c: 102: }
   323                           ;main.c: 105: if( (ui16TickMs - ui16SwitchTimer) >= 2000 && (ui16TickMs - ui16SwitchTime
      +                          r) < 3000 ){
   324  004D  092B               	comf	main@ui16SwitchTimer,w
   325  004E  00A4               	movwf	??_main
   326  004F  092C               	comf	main@ui16SwitchTimer+1,w
   327  0050  00A5               	movwf	??_main+1
   328  0051  0AA4               	incf	??_main,f
   329  0052  1903               	skipnz
   330  0053  0AA5               	incf	??_main+1,f
   331  0054  082D               	movf	_ui16TickMs,w	;volatile
   332  0055  0724               	addwf	??_main,w
   333  0056  00A6               	movwf	??_main+2
   334  0057  082E               	movf	_ui16TickMs+1,w	;volatile
   335  0058  1803               	skipnc
   336  0059  0A2E               	incf	_ui16TickMs+1,w	;volatile
   337  005A  0725               	addwf	??_main+1,w
   338  005B  00A7               	movwf	??_main+3
   339  005C  3007               	movlw	7
   340  005D  0227               	subwf	??_main+3,w
   341  005E  30D0               	movlw	208
   342  005F  1903               	skipnz
   343  0060  0226               	subwf	??_main+2,w
   344  0061  1C03               	skipc
   345  0062  2879               	goto	l637
   346  0063  092B               	comf	main@ui16SwitchTimer,w
   347  0064  00A4               	movwf	??_main
   348  0065  092C               	comf	main@ui16SwitchTimer+1,w
   349  0066  00A5               	movwf	??_main+1
   350  0067  0AA4               	incf	??_main,f
   351  0068  1903               	skipnz
   352  0069  0AA5               	incf	??_main+1,f
   353  006A  082D               	movf	_ui16TickMs,w	;volatile
   354  006B  0724               	addwf	??_main,w
   355  006C  00A6               	movwf	??_main+2
   356  006D  082E               	movf	_ui16TickMs+1,w	;volatile
   357  006E  1803               	skipnc
   358  006F  0A2E               	incf	_ui16TickMs+1,w	;volatile
   359  0070  0725               	addwf	??_main+1,w
   360  0071  00A7               	movwf	??_main+3
   361  0072  300B               	movlw	11
   362  0073  0227               	subwf	??_main+3,w
   363  0074  30B8               	movlw	184
   364  0075  1903               	skipnz
   365  0076  0226               	subwf	??_main+2,w
   366  0077  1C03               	btfss	3,0
   367                           
   368                           ;main.c: 107: PORTCbits.RC4 = 0;
   369  0078  1207               	bcf	7,4	;volatile
   370  0079                     l637:	
   371                           
   372                           ;main.c: 110: }
   373                           ;main.c: 113: if( (ui16TickMs - ui16SwitchTimer) >= 5000 ){
   374  0079  092B               	comf	main@ui16SwitchTimer,w
   375  007A  00A4               	movwf	??_main
   376  007B  092C               	comf	main@ui16SwitchTimer+1,w
   377  007C  00A5               	movwf	??_main+1
   378  007D  0AA4               	incf	??_main,f
   379  007E  1903               	skipnz
   380  007F  0AA5               	incf	??_main+1,f
   381  0080  082D               	movf	_ui16TickMs,w	;volatile
   382  0081  0724               	addwf	??_main,w
   383  0082  00A6               	movwf	??_main+2
   384  0083  082E               	movf	_ui16TickMs+1,w	;volatile
   385  0084  1803               	skipnc
   386  0085  0A2E               	incf	_ui16TickMs+1,w	;volatile
   387  0086  0725               	addwf	??_main+1,w
   388  0087  00A7               	movwf	??_main+3
   389  0088  3013               	movlw	19
   390  0089  0227               	subwf	??_main+3,w
   391  008A  3088               	movlw	136
   392  008B  1903               	skipnz
   393  008C  0226               	subwf	??_main+2,w
   394  008D  1C03               	skipc
   395  008E  2894               	goto	l641
   396                           
   397                           ;main.c: 115: PORTCbits.RC1 = 0;
   398  008F  1087               	bcf	7,1	;volatile
   399                           
   400                           ;main.c: 116: PORTCbits.RC2 = 0;
   401  0090  1107               	bcf	7,2	;volatile
   402                           
   403                           ;main.c: 117: PORTCbits.RC3 = 0;
   404  0091  1187               	bcf	7,3	;volatile
   405                           
   406                           ;main.c: 118: bFirstEntry = 1;
   407  0092  01AA               	clrf	main@bFirstEntry
   408  0093  0AAA               	incf	main@bFirstEntry,f
   409  0094                     l641:	
   410                           
   411                           ;main.c: 120: }
   412                           ;main.c: 122: }
   413                           ;main.c: 125: if( ui16TickMs - ui16BlinkTimer >= 1000 ){
   414  0094  0928               	comf	main@ui16BlinkTimer,w
   415  0095  00A4               	movwf	??_main
   416  0096  0929               	comf	main@ui16BlinkTimer+1,w
   417  0097  00A5               	movwf	??_main+1
   418  0098  0AA4               	incf	??_main,f
   419  0099  1903               	skipnz
   420  009A  0AA5               	incf	??_main+1,f
   421  009B  082D               	movf	_ui16TickMs,w	;volatile
   422  009C  0724               	addwf	??_main,w
   423  009D  00A6               	movwf	??_main+2
   424  009E  082E               	movf	_ui16TickMs+1,w	;volatile
   425  009F  1803               	skipnc
   426  00A0  0A2E               	incf	_ui16TickMs+1,w	;volatile
   427  00A1  0725               	addwf	??_main+1,w
   428  00A2  00A7               	movwf	??_main+3
   429  00A3  3003               	movlw	3
   430  00A4  0227               	subwf	??_main+3,w
   431  00A5  30E8               	movlw	232
   432  00A6  1903               	skipnz
   433  00A7  0226               	subwf	??_main+2,w
   434  00A8  1C03               	skipc
   435  00A9  28B8               	goto	l42
   436                           
   437                           ;main.c: 128: ui16BlinkTimer = ui16TickMs;
   438  00AA  082E               	movf	_ui16TickMs+1,w	;volatile
   439  00AB  00A9               	movwf	main@ui16BlinkTimer+1
   440  00AC  082D               	movf	_ui16TickMs,w	;volatile
   441  00AD  00A8               	movwf	main@ui16BlinkTimer
   442                           
   443                           ;main.c: 130: PORTCbits.RC5 = ~PORTCbits.RC5;
   444  00AE  1003               	clrc
   445  00AF  1E87               	btfss	7,5	;volatile
   446  00B0  1403               	setc
   447  00B1  1C03               	btfss	3,0
   448  00B2  28B6               	goto	u240
   449  00B3  1283               	bcf	3,5	;RP0=0, select bank0
   450  00B4  1687               	bsf	7,5	;volatile
   451  00B5  28B8               	goto	l42
   452  00B6                     u240:	
   453  00B6  1283               	bcf	3,5	;RP0=0, select bank0
   454  00B7  1287               	bcf	7,5	;volatile
   455  00B8                     l42:	
   456  00B8  0064               	clrwdt	;# 
   457  00B9  2834               	goto	l615
   458  00BA                     __end_of_main:	
   459                           
   460                           	psect	text1
   461  00BA                     __ptext1:	
   462 ;; *************** function _ISR *****************
   463 ;; Defined at:
   464 ;;		line 141 in file "main.c"
   465 ;; Parameters:    Size  Location     Type
   466 ;;		None
   467 ;; Auto vars:     Size  Location     Type
   468 ;;		None
   469 ;; Return value:  Size  Location     Type
   470 ;;                  1    wreg      void 
   471 ;; Registers used:
   472 ;;		wreg
   473 ;; Tracked objects:
   474 ;;		On entry : 0/0
   475 ;;		On exit  : 0/0
   476 ;;		Unchanged: 0/0
   477 ;; Data sizes:     COMMON   BANK0
   478 ;;      Params:         0       0
   479 ;;      Locals:         0       0
   480 ;;      Temps:          0       4
   481 ;;      Totals:         0       4
   482 ;;Total ram usage:        4 bytes
   483 ;; Hardware stack levels used:    1
   484 ;; This function calls:
   485 ;;		Nothing
   486 ;; This function is called by:
   487 ;;		Interrupt level 1
   488 ;; This function uses a non-reentrant model
   489 ;;
   490                           
   491                           
   492                           ;psect for function _ISR
   493  00BA                     _ISR:	
   494                           
   495                           ;main.c: 143: if(PIR1bits.T1IF == 1){
   496  00BA  1C0C               	btfss	12,0	;volatile
   497  00BB  28C9               	goto	i1l49
   498                           
   499                           ;main.c: 146: T1CONbits.TMR1ON = 0;
   500  00BC  1010               	bcf	16,0	;volatile
   501                           
   502                           ;main.c: 148: PIR1bits.T1IF = 0;
   503  00BD  100C               	bcf	12,0	;volatile
   504                           
   505                           ;main.c: 152: ui16TickMs++;
   506  00BE  3001               	movlw	1
   507  00BF  07AD               	addwf	_ui16TickMs,f	;volatile
   508  00C0  1803               	skipnc
   509  00C1  0AAE               	incf	_ui16TickMs+1,f	;volatile
   510  00C2  3000               	movlw	0
   511  00C3  07AE               	addwf	_ui16TickMs+1,f	;volatile
   512                           
   513                           ;main.c: 156: TMR1 = 64536;
   514  00C4  30FC               	movlw	252
   515  00C5  008F               	movwf	15	;volatile
   516  00C6  3018               	movlw	24
   517  00C7  008E               	movwf	14	;volatile
   518                           
   519                           ;main.c: 158: T1CONbits.TMR1ON = 1;
   520  00C8  1410               	bsf	16,0	;volatile
   521  00C9                     i1l49:	
   522  00C9  0823               	movf	??_ISR+3,w
   523  00CA  00DF               	movwf	95
   524  00CB  0822               	movf	??_ISR+2,w
   525  00CC  008A               	movwf	10
   526  00CD  0821               	movf	??_ISR+1,w
   527  00CE  0084               	movwf	4
   528  00CF  0E20               	swapf	??_ISR^0,w
   529  00D0  0083               	movwf	3
   530  00D1  0EDE               	swapf	94,f
   531  00D2  0E5E               	swapf	94,w
   532  00D3  0009               	retfie
   533  00D4                     __end_of_ISR:	
   534  005E                     btemp	set	94	;btemp
   535  005E                     wtemp0	set	94
   536                           
   537                           	psect	intentry
   538  0004                     __pintentry:	
   539                           ;incstack = 0
   540                           ; Regs used in _ISR: [wreg]
   541                           
   542  0004                     interrupt_function:	
   543  005E                     saved_w	set	btemp
   544  0004  00DE               	movwf	btemp
   545  0005  0E03               	swapf	3,w
   546  0006  1283               	bcf	3,5	;RP0=0, select bank0
   547  0007  00A0               	movwf	??_ISR
   548  0008  0804               	movf	4,w
   549  0009  00A1               	movwf	??_ISR+1
   550  000A  080A               	movf	10,w
   551  000B  00A2               	movwf	??_ISR+2
   552  000C  085F               	movf	btemp+1,w
   553  000D  00A3               	movwf	??_ISR+3
   554  000E  28BA               	ljmp	_ISR


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            0      0       0
    BANK0            62     13      15

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 9     9      0     117
                                              4 BANK0      9     9      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 0
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (1) _ISR                                                  4     4      0       0
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            0      0       0       0        0.0%
EEDATA              80      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            3E      0       0       3        0.0%
BANK0               3E      D       F       4       24.2%
ABS                  0      0       F       5        0.0%
DATA                 0      0       F       6        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Fri Oct 06 20:08:26 2017

            __CFG_CP$OFF 0000                       l42 00B8                       l35 003B  
                     l36 003F                       l37 0043                      l631 004D  
                    l615 0034                      l641 0094                      l637 0079  
                    u240 00B6             __CFG_CPD$OFF 0000                      _ISR 00BA  
                    fsr0 0004                     ?_ISR 0020             __CFG_WDTE$ON 0000  
                   i1l49 00C9                     _TMR1 000E                     _WPUA 0095  
                   _main 0014                     btemp 005E            __CFG_BOREN$ON 0000  
                   start 000F                    ??_ISR 0020                    ?_main 0020  
                  _ANSEL 0091                    _PORTC 0007                    _TRISA 0085  
                  _TRISC 0087                    pclath 000A                    status 0003  
                  wtemp0 005E           __CFG_MCLRE$OFF 0000          __initialization 0010  
           __end_of_main 00BA                   ??_main 0024       main@ui16BlinkTimer 0028  
         __CFG_PWRTE$OFF 0000                   saved_w 005E  __end_of__initialization 0012  
         _OPTION_REGbits 0081               _ui16TickMs 002D               __pbssBANK0 002D  
        main@bFirstEntry 002A               __pmaintext 0014               __pintentry 0004  
              _CMCONbits 0019                  __ptext1 00BA             __size_of_ISR 001A  
              _T1CONbits 0010     end_of_initialization 0012                _PORTAbits 0005  
              _PORTCbits 0007      start_initialization 0010              __end_of_ISR 00D4  
              ___latbits 0000            __pcstackBANK0 0020        interrupt_function 0004  
               _PIE1bits 008C                 _PIR1bits 000C      main@ui16SwitchTimer 002B  
          __size_of_main 00A6               _INTCONbits 000B                 intlevel1 0000  
      __CFG_FOSC$INTRCIO 0000  
